# Bedrock client & model
bedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')
MODEL_ID = 'amazon.nova-micro-v1:0'

def call_nova(prompt: str):
    """Invoke Nova Pro with a single prompt; expect a JSON array or string."""
    body = {
        "messages": [
            {"role": "user", "content": [{"text": prompt}]}
        ],
        "inferenceConfig": {
            "max_new_tokens": 256,
            "temperature": 0.2,
            "top_p": 0.9,
            "top_k": 50
        }
    }
    resp = bedrock_client.invoke_model(
        modelId=MODEL_ID,
        contentType='application/json',
        accept='application/json',
        body=json.dumps(body)
    )
    text = json.loads(resp['body'].read())["output"]["message"]["content"][0]["text"]
    # parse JSON if possible
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        return text.strip()

# 1. Define each prompt fragment
PROMPTS = {
    "purpose": "Provide a one-sentence statement of the meeting purpose.",
    "action_items": "List 5 action-item strings for individuals to follow up on before the next call.",
    "topics": "List the 3 main topics, and 1 highlight in a nested list format.",
    "questions": "List 3 questions asked, including who asked and who answered each one.",
    "next_steps": "List 3 next-step bullet points to follow up on based on the overall meeting."
}

def call_nova(prompt: str):
    """Invoke Nova Pro with a single prompt; expect a JSON array or string."""
    body = {
        "messages": [
            {"role": "user", "content": [{"text": prompt}]}
        ],
        "inferenceConfig": {
            "max_new_tokens": 256,
            "temperature": 0.2,
            "top_p": 0.9,
            "top_k": 50
        }
    }
    resp = bedrock_client.invoke_model(
        modelId=MODEL_ID,
        contentType='application/json',
        accept='application/json',
        body=json.dumps(body)
    )
    text = json.loads(resp['body'].read())["output"]["message"]["content"][0]["text"]
    # parse JSON if possible
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        return text.strip()